Parameters:
  BranchName:
    Description: CodeCommit branch name
    Type: String
    Default: main
  RepositoryName:
    Description: CodeCommit repository name
    Type: String
    Default: AWSfoodAgg  
  BucketNameArtifactory:
    Description: CodeCommit repository name
    Type: String
    Default: codepipelineartifact-aws-common
  ECRUri:
    Description: ECR repository URI
    Type: String
    Default: "fao-awsfoodecr"
  StackName:
    Description: Stack name
    Type: String
    Default: awsfoodagg-stackname  
Resources:
  AppCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: myCodeBuildName 
      Description: CodeBuild to build sbt project
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/java:openjdk-8
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - ls -la
                - uname -a
                - sudo apt-get update
                - sudo apt-get install apt-transport-https ca-certificates
                - echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
                - echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
                - curl -sLk "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add -
                - sudo apt-get update
                - sudo apt-get install sbt
            pre_build:
              commands:
                - echo "prebuild"
            build:
              commands:
                - sbt clean compile test package
                - ls -la
                - ls -la target
          artifacts:
            files:
              - target/scala-2.12/*.jar
            discard-paths: yes
          cache:
            paths:
              - /root/.sbt/**/*
              - /root/.m2/**/*
              - /root/.ivy2/**/*
      TimeoutInMinutes: 10
      Tags:
        - Key: projectname
          Value: awsfoodagg
  AppDockerBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: myDockerBuildName 
      Description: CodeBuild to build docker project
      ServiceRole: !Ref DockerBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: ECRRepositoryURI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRUri}"
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - ls -la
                - uname -a
            pre_build:
              commands:
                - echo "prebuild"
                # - docker pull ${ECRRepositoryURI}:latest || true
            build:
              commands:
                - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 571397504118.dkr.ecr.eu-west-1.amazonaws.com
                - docker build -t fao-awsfoodecr -f 'docker/Dockerfile' .
                # - docker build --progress=plain -t ${ECRRepositoryURI}:latest -f 'docker/Dockerfile' .
                - docker tag fao-awsfoodecr:latest 571397504118.dkr.ecr.eu-west-1.amazonaws.com/fao-awsfoodecr:latest
                - docker push 571397504118.dkr.ecr.eu-west-1.amazonaws.com/fao-awsfoodecr:latest
                # - docker image save -o image.tar ${ECRRepositoryURI}:latest
                - ls -la 
            post_build:
              commands:
                # - docker push 571397504118.dkr.ecr.eu-west-1.amazonaws.com/fao-awsfoodecr:latest
                # - docker push ${ECRRepositoryURI}:latest
          artifacts:
            files:
              - docker/Dockerfile
          cache:
            paths:
              - /root/.docker-cache/**/*
      TimeoutInMinutes: 10
      Tags:
        - Key: projectname
          Value: awsfoodagg          
  AppShellCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: myShellCodeBuildName 
      Description: CodeBuild to build shell project
      ServiceRole: !Ref ShellCodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/java:openjdk-8
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo "Calling Shell CodeBuild"
                - ls -laR ${FOLDER}
          artifacts:
            files:
              - '**/*'
            base-directory: ${FOLDER}
  AppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: awsfoodagg-codepipeline
      RoleArn: !GetAtt 
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName: !Ref RepositoryName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ShellBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: shellbuilt    
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref AppShellCodeBuild
                EnvironmentVariables: '[{"name": "FOLDER", "type": "PLAINTEXT", "value": "./src/main/resources/"}]' 
              RunOrder: 1
            - Name: ScalaBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: scalabuilt    
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref AppCodeBuild   
              RunOrder: 1
            - Name: DockerBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: dockerbuilt    
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref AppDockerBuild   
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: ScalaDeploy
              InputArtifacts:
                - Name: scalabuilt
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                Extract: True
                BucketName: !Ref BucketNameArtifactory
                ObjectKey: deploy/jar
              RunOrder: 1
            - Name: ShellDeploy
              InputArtifacts:
                - Name: shellbuilt
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                Extract: True
                BucketName: !Ref BucketNameArtifactory
                ObjectKey: deploy/shell
              RunOrder: 1  
            - Name: InfraDeploy
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationRole.Arn
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                StackName: !Ref StackName
                TemplatePath: SourceOutput::aws/infra/infracodepipeline.yml
                TemplateConfiguration: SourceOutput::aws/infra/params.json
                OutputFileName: outputs.json
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref BucketNameArtifactory
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service-food
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'devicefarm:ListProjects'
                  - 'devicefarm:ListDevicePools'
                  - 'devicefarm:GetRun'
                  - 'devicefarm:GetUpload'
                  - 'devicefarm:CreateUpload'
                  - 'devicefarm:ScheduleRun'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                Resource: '*'
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                Effect: Allow
                Resource: '*'
              - Effect: Allow
                Action: s3:*
                Resource: 
                - "arn:aws:s3:::codepipelineartifact-aws-common"
                - "arn:aws:s3:::codepipelineartifact-aws-common/*"
  DockerBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                Effect: Allow
                Resource: '*'
              - Action: 
                - 'ecr:GetAuthorizationToken'
                - 'ecr:*'
                Effect: Allow
                Resource: '*'
              - Action: s3:*
                Effect: Allow
                Resource: 
                - "arn:aws:s3:::codepipelineartifact-aws-common"
                - "arn:aws:s3:::codepipelineartifact-aws-common/*"
  ShellCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                Effect: Allow
                Resource: '*'
              - Effect: Allow
                Action: s3:*
                Resource: 
                - "arn:aws:s3:::codepipelineartifact-aws-common"
                - "arn:aws:s3:::codepipelineartifact-aws-common/*"

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
            Effect: Allow
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:CreatePolicy
                  - iam:ListPolicyVersions
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DeletePolicy
                  - iam:GetRolePolicy
                  - iam:CreatePolicyVersion
                  - iam:DeletePolicyVersion
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                  - iam:GetRole
                  - iam:PassRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:GetInstanceProfile
                  - iam:CreateInstanceProfile
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:DeleteInstanceProfile
                Resource: '*'
              - Effect: Allow
                Action: codebuild:*
                Resource: '*'
              - Effect: Allow
                Action: cloudformation:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:UpdateFunctionCode
                Resource: '*'
                 
  MyRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "fao-awsfoodecr"
      